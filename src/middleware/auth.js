const { verifyVulnerableToken, verifySecureToken } = require('../utils/jwt');

// Vulnerable authentication middleware (minimal checks)
const vulnerableAuth = async (req, res, next) => {
    try {
        const token = req.header('Authorization')?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ message: 'Authentication required' });
        }

        const decoded = verifyVulnerableToken(token);
        if (!decoded) {
            return res.status(401).json({ message: 'Invalid token' });
        }

        req.user = decoded;
        next();
    } catch (error) {
        res.status(401).json({ message: 'Authentication failed' });
    }
};

// Secure authentication middleware (comprehensive checks)
const secureAuth = async (req, res, next) => {
    try {
        const token = req.header('Authorization')?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ message: 'Authentication required' });
        }

        const decoded = verifySecureToken(token);
        if (!decoded) {
            return res.status(401).json({ message: 'Invalid token' });
        }

        // Additional security checks
        const now = Math.floor(Date.now() / 1000);
        if (decoded.exp < now) {
            return res.status(401).json({ message: 'Token expired' });
        }

        if (decoded.nbf > now) {
            return res.status(401).json({ message: 'Token not yet valid' });
        }

        req.user = decoded;
        next();
    } catch (error) {
        res.status(401).json({ message: 'Authentication failed' });
    }
};

// Admin role check middleware
const adminOnly = async (req, res, next) => {
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Admin access required' });
    }
    next();
};

module.exports = {
    vulnerableAuth,
    secureAuth,
    adminOnly
}; 
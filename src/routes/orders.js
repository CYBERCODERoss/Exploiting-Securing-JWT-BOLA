const express = require('express');
const router = express.Router();
const { vulnerableAuth, secureAuth } = require('../middleware/auth');

// Vulnerable Routes (Demonstrating BOLA)
// GET all orders (Vulnerable - no user check)
router.get('/vulnerable/orders', vulnerableAuth, async (req, res) => {
    try {
        const orders = await req.models.vulnerable.Order.find();
        res.json(orders);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching orders' });
    }
});

// GET order by ID (Vulnerable - no user check)
router.get('/vulnerable/orders/:id', vulnerableAuth, async (req, res) => {
    try {
        const order = await req.models.vulnerable.Order.findById(req.params.id);
        if (!order) {
            return res.status(404).json({ message: 'Order not found' });
        }
        res.json(order);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching order' });
    }
});

// POST new order (Vulnerable - no validation)
router.post('/vulnerable/orders', vulnerableAuth, async (req, res) => {
    try {
        const order = new req.models.vulnerable.Order({
            ...req.body,
            userId: req.user.userId
        });
        await order.save();
        res.status(201).json(order);
    } catch (error) {
        res.status(500).json({ message: 'Error creating order' });
    }
});

// Secure Routes
// GET all orders (Secure - only user's orders or admin)
router.get('/secure/orders', secureAuth, async (req, res) => {
    try {
        const orders = req.user.role === 'admin' 
            ? await req.models.secure.Order.find()
            : await req.models.secure.Order.find({ userId: req.user.userId });
        res.json(orders);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching orders' });
    }
});

// GET order by ID (Secure - only user's order or admin)
router.get('/secure/orders/:id', secureAuth, async (req, res) => {
    try {
        const order = await req.models.secure.Order.findById(req.params.id);
        
        if (!order) {
            return res.status(404).json({ message: 'Order not found' });
        }

        // Check if user has permission to view this order
        if (req.user.role !== 'admin' && order.userId.toString() !== req.user.userId) {
            return res.status(403).json({ message: 'Access denied' });
        }

        res.json(order);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching order' });
    }
});

// POST new order (Secure - with validation)
router.post('/secure/orders', secureAuth, async (req, res) => {
    try {
        // Validate order items and calculate total
        if (!req.body.items || !Array.isArray(req.body.items) || req.body.items.length === 0) {
            return res.status(400).json({ message: 'Order must contain items' });
        }

        let totalAmount = 0;
        for (const item of req.body.items) {
            if (!item.price || !item.quantity || item.price <= 0 || item.quantity <= 0) {
                return res.status(400).json({ message: 'Invalid item details' });
            }
            totalAmount += item.price * item.quantity;
        }

        const order = new req.models.secure.Order({
            userId: req.user.userId,
            items: req.body.items,
            totalAmount
        });

        await order.save();
        res.status(201).json(order);
    } catch (error) {
        res.status(500).json({ message: 'Error creating order' });
    }
});

// PUT update order status (Secure - admin only)
router.put('/secure/orders/:id/status', secureAuth, async (req, res) => {
    try {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ message: 'Admin access required' });
        }

        const { status } = req.body;
        if (!['pending', 'completed', 'cancelled'].includes(status)) {
            return res.status(400).json({ message: 'Invalid status' });
        }

        const order = await req.models.secure.Order.findByIdAndUpdate(
            req.params.id,
            { status },
            { new: true }
        );

        if (!order) {
            return res.status(404).json({ message: 'Order not found' });
        }

        res.json(order);
    } catch (error) {
        res.status(500).json({ message: 'Error updating order status' });
    }
});

// DELETE order (Secure - admin only)
router.delete('/secure/orders/:id', secureAuth, async (req, res) => {
    try {
        if (req.user.role !== 'admin') {
            return res.status(403).json({ message: 'Admin access required' });
        }

        const order = await req.models.secure.Order.findByIdAndDelete(req.params.id);
        if (!order) {
            return res.status(404).json({ message: 'Order not found' });
        }

        res.json({ message: 'Order deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Error deleting order' });
    }
});

module.exports = router; 
const express = require('express');
const router = express.Router();
const { generateVulnerableToken, generateSecureToken } = require('../utils/jwt');

// Vulnerable login endpoint
router.post('/vulnerable/login', async (req, res) => {
    try {
        const { username, password } = req.body;
        
        const user = await req.models.vulnerable.User.findOne({ username });
        if (!user) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const isValidPassword = await user.comparePassword(password);
        if (!isValidPassword) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const token = generateVulnerableToken(user);
        res.json({ token });
    } catch (error) {
        res.status(500).json({ message: 'Login failed' });
    }
});

// Secure login endpoint
router.post('/secure/login', async (req, res) => {
    try {
        const { username, password } = req.body;
        
        const user = await req.models.secure.User.findOne({ username });
        if (!user) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const isValidPassword = await user.comparePassword(password);
        if (!isValidPassword) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const token = generateSecureToken(user);
        res.json({ token });
    } catch (error) {
        res.status(500).json({ message: 'Login failed' });
    }
});

// Register endpoint for both databases
router.post('/register', async (req, res) => {
    try {
        const { username, password, role } = req.body;
        
        // Check if user exists in either database
        const existingVulnUser = await req.models.vulnerable.User.findOne({ username });
        const existingSecureUser = await req.models.secure.User.findOne({ username });
        
        if (existingVulnUser || existingSecureUser) {
            return res.status(400).json({ message: 'Username already exists' });
        }

        // Create user in both databases
        const vulnerableUser = new req.models.vulnerable.User({
            username,
            password,
            role: role || 'customer'
        });

        const secureUser = new req.models.secure.User({
            username,
            password,
            role: role || 'customer'
        });

        await Promise.all([
            vulnerableUser.save(),
            secureUser.save()
        ]);

        res.status(201).json({ message: 'User registered successfully' });
    } catch (error) {
        console.error('Registration error:', error);
        res.status(500).json({ message: 'Registration failed' });
    }
});

module.exports = router; 
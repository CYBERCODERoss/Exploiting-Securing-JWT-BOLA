const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');

// Vulnerable JWT implementation
const generateVulnerableToken = (user) => {
    const payload = {
        userId: user._id,
        username: user.username,
        role: user.role
    };

    return jwt.sign(payload, process.env.JWT_VULNERABLE_SECRET, {
        expiresIn: process.env.JWT_VULNERABLE_EXPIRY
    });
};

// Secure JWT implementation
const generateSecureToken = (user) => {
    const payload = {
        userId: user._id,
        username: user.username,
        role: user.role,
        jti: uuidv4(), // Unique token ID
        iat: Math.floor(Date.now() / 1000), // Issued at
        nbf: Math.floor(Date.now() / 1000) // Not valid before
    };

    return jwt.sign(payload, process.env.JWT_SECURE_SECRET, {
        expiresIn: process.env.JWT_SECURE_EXPIRY
    });
};

// Verify vulnerable token
const verifyVulnerableToken = (token) => {
    try {
        return jwt.verify(token, process.env.JWT_VULNERABLE_SECRET);
    } catch (error) {
        return null;
    }
};

// Verify secure token
const verifySecureToken = (token) => {
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECURE_SECRET);
        
        // Additional checks for secure implementation
        const now = Math.floor(Date.now() / 1000);
        if (decoded.nbf > now) {
            throw new Error('Token not yet valid');
        }
        
        return decoded;
    } catch (error) {
        return null;
    }
};

module.exports = {
    generateVulnerableToken,
    generateSecureToken,
    verifyVulnerableToken,
    verifySecureToken
}; 
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

// Import routes
const authRoutes = require('./routes/auth');
const productRoutes = require('./routes/products');
const orderRoutes = require('./routes/orders');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Create separate connections for vulnerable and secure databases
const vulnerableConnection = mongoose.createConnection(process.env.MONGODB_URI_VULNERABLE, {
    dbName: 'ecommerce_vulnerable'
});

const secureConnection = mongoose.createConnection(process.env.MONGODB_URI_SECURE, {
    dbName: 'ecommerce_secure'
});

// Connection event handlers for vulnerable database
vulnerableConnection.on('connected', () => {
    console.log('Connected to vulnerable database');
});

vulnerableConnection.on('error', (err) => {
    console.error('Vulnerable database connection error:', err);
});

// Connection event handlers for secure database
secureConnection.on('connected', () => {
    console.log('Connected to secure database');
});

secureConnection.on('error', (err) => {
    console.error('Secure database connection error:', err);
});

// Create models for both databases
const UserVulnerable = vulnerableConnection.model('User', require('./models/User').schema);
const UserSecure = secureConnection.model('User', require('./models/User').schema);

const ProductVulnerable = vulnerableConnection.model('Product', require('./models/Product').schema);
const ProductSecure = secureConnection.model('Product', require('./models/Product').schema);

const OrderVulnerable = vulnerableConnection.model('Order', require('./models/Order').schema);
const OrderSecure = secureConnection.model('Order', require('./models/Order').schema);

// Make models available to the routes
app.use((req, res, next) => {
    req.models = {
        vulnerable: {
            User: UserVulnerable,
            Product: ProductVulnerable,
            Order: OrderVulnerable
        },
        secure: {
            User: UserSecure,
            Product: ProductSecure,
            Order: OrderSecure
        }
    };
    next();
});

// Basic route
app.get('/', (req, res) => {
    res.json({
        message: 'E-commerce Security Demo API',
        endpoints: {
            vulnerable: {
                auth: '/api/auth/vulnerable/*',
                products: '/api/vulnerable/products/*',
                orders: '/api/vulnerable/orders/*'
            },
            secure: {
                auth: '/api/auth/secure/*',
                products: '/api/secure/products/*',
                orders: '/api/secure/orders/*'
            }
        }
    });
});

// Routes
app.use('/api/auth', authRoutes);
app.use('/api', productRoutes);
app.use('/api', orderRoutes);

// Error handling middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: 'Something went wrong!' });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
}); 
const express = require('express');
const router = express.Router();
const { vulnerableAuth, secureAuth, adminOnly } = require('../middleware/auth');

// Vulnerable Routes (No proper authorization checks)
// GET all products
router.get('/vulnerable/products', async (req, res) => {
    try {
        const products = await req.models.vulnerable.Product.find();
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching products' });
    }
});

// GET product by ID
router.get('/vulnerable/products/:id', async (req, res) => {
    try {
        const product = await req.models.vulnerable.Product.findById(req.params.id);
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }
        res.json(product);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching product' });
    }
});

// POST new product (Vulnerable - no proper auth)
router.post('/vulnerable/products', async (req, res) => {
    try {
        const product = new req.models.vulnerable.Product(req.body);
        await product.save();
        res.status(201).json(product);
    } catch (error) {
        res.status(500).json({ message: 'Error creating product' });
    }
});

// Secure Routes (With proper authorization)
// GET all products
router.get('/secure/products', async (req, res) => {
    try {
        const products = await req.models.secure.Product.find().select('-ratings.userId');
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching products' });
    }
});

// GET product by ID
router.get('/secure/products/:id', async (req, res) => {
    try {
        const product = await req.models.secure.Product.findById(req.params.id).select('-ratings.userId');
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }
        res.json(product);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching product' });
    }
});

// POST new product (Secure - requires admin)
router.post('/secure/products', secureAuth, adminOnly, async (req, res) => {
    try {
        const product = new req.models.secure.Product(req.body);
        await product.save();
        res.status(201).json(product);
    } catch (error) {
        res.status(500).json({ message: 'Error creating product' });
    }
});

// PUT update product (Secure - requires admin)
router.put('/secure/products/:id', secureAuth, adminOnly, async (req, res) => {
    try {
        const product = await req.models.secure.Product.findByIdAndUpdate(
            req.params.id,
            req.body,
            { new: true, runValidators: true }
        );
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }
        res.json(product);
    } catch (error) {
        res.status(500).json({ message: 'Error updating product' });
    }
});

// DELETE product (Secure - requires admin)
router.delete('/secure/products/:id', secureAuth, adminOnly, async (req, res) => {
    try {
        const product = await req.models.secure.Product.findByIdAndDelete(req.params.id);
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }
        res.json({ message: 'Product deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Error deleting product' });
    }
});

// Add rating (Secure - requires authentication)
router.post('/secure/products/:id/rate', secureAuth, async (req, res) => {
    try {
        const { rating, review } = req.body;
        const product = await req.models.secure.Product.findById(req.params.id);
        
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        // Check if user has already rated
        const existingRating = product.ratings.find(
            r => r.userId.toString() === req.user.userId
        );

        if (existingRating) {
            return res.status(400).json({ message: 'You have already rated this product' });
        }

        product.ratings.push({
            userId: req.user.userId,
            rating,
            review
        });

        await product.save();
        res.json(product);
    } catch (error) {
        res.status(500).json({ message: 'Error adding rating' });
    }
});

module.exports = router; 